题目描述：
      输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。
（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）

解题思路：
      方案1：

            第一步：遍历老链表，构建正常的链表，用一个map记录p到new_p
            第二步：新老链表同步next移动，对比记录random指针。
            p 1->2->3->4 map | | | | new_p 1->2->3->4

            需要借助O(n)的空间，时间复杂度为o(n)

      方案2：

            不需要借助O(n)的空间，时间复杂度为o(n)

            老新链表交叉存储，奇数位置为老链表，偶数位置新链表复制前一个位置。

            新链表random即为旧链表random的后一个位置。

            p1->p1'->p2->p2'->...->pn->pn'
            
成功方案：
# -*- coding:utf-8 -*-
# class RandomListNode:
#     def __init__(self, x):
#         self.label = x
#         self.next = None
#         self.random = None
class Solution:
    # 返回 RandomListNode
    def Clone(self, pHead):
        # write code here
        if not pHead: return None
        p = pHead
        new_h = RandomListNode(p.label)
        pre_p = new_h
        random_map = {pHead: new_h}
        p = p.next
        while p:
            new_p = RandomListNode(p.label)
            random_map[p] = new_p
            pre_p.next = new_p
            pre_p = pre_p.next
            p = p.next
        p = pHead
        new_p = new_h
        while p:
            random_p = p.random
            if random_p:
                new_p.random = random_map[random_p]

            p = p.next
            new_p = new_p.next

        return new_h
        
        
 2.public class Solution {
      public RandomListNode Clone(RandomListNode pHead){
          if(pHead==null)
              return null;
          RandomListNode pCur = pHead;
          //复制next 如原来是A->B->C 变成A->A'->B->B'->C->C'
          while(pCur!=null){
              RandomListNode node = new RandomListNode(pCur.label);
              node.next = pCur.next;
              pCur.next = node;
              pCur = node.next;
          }
          pCur = pHead;
          //复制random pCur是原来链表的结点 pCur.next是复制pCur的结点
          while(pCur!=null){
              if(pCur.random!=null)
                  pCur.next.random = pCur.random.next;
              pCur = pCur.next.next;
          }
          RandomListNode head = pHead.next;
          RandomListNode cur = head;
          pCur = pHead;
          //拆分链表
          while(pCur!=null){
              pCur.next = pCur.next.next;
              if(cur.next!=null)
                  cur.next = cur.next.next;
              cur = cur.next;
              pCur = pCur.next;
          }
          return head;       
      }
  }

