题目：

给定一个数组nums（仅包含正整数），将这个数组切分为两个子数组，使得这两个子数组的和相等。若能完成上述切分，返回True，否则返回False

解题思路：

跟494.target sum 非常类似，该题直通车：

http://blog.csdn.net/xiaoxiaoley/article/details/78968852

本题思路，先进行数学分析，设子集为A、B，则有sum(A)+sum(B)=sum(nums),sum(A)=sum(B)，则有sum(A)=sum(nums)/2。
故可以将题目转化为从nums中寻找是否有和为sum(nums)/2的子集，有则返回True，否则返回False。

寻找和为sum(nums)/2的子集，可以使用动态规划的思路。用dp[i]来存储和为i的组合个数，对nums里边的数字用n进行遍历，
对于所有i>=n的i，有dp[i]=dp[i]+dp[i-n]。

代码（Python）：

class Solution(object):
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if nums==[]:
            return True
        if sum(nums)%2==1:
            return False
        target = sum(nums)/2
        print target
        dp = [0]*(target+1)
        dp[0] = 1
        for n in nums:
            i = target
            while(i>=n):
                dp[i] = dp[i]+dp[i-n]
                i = i-1
        if dp[target]>=2:
            return True
        else:
            return False
