参考链接：https://blog.csdn.net/wulitaotao96/article/details/95097133
         https://blog.csdn.net/chanmufeng/article/details/82955730

商品种类m，背包容量C
初始化一个m+1，C+1的二维矩阵 初始化为0
保持第一行为0不变，从第二行开始 动态规划。修改矩阵值
w= [0 , 2 , 3 , 4 , 5 ]			#商品的体积2、3、4、5
v = [0 , 3 , 4 , 5 , 6 ]		#商品的价值3、4、5、6
bagV = 8;					        #背包大小
dp = [[0 for i in range(9) ]for i in range(5)]		       #动态规划表
item = [0]*5                 #最优解情况
def findMax(): #动态规划
    for i in range (1，5):
        for j in range(bagV+1):
            #对于当前容量j，考虑放不放第i件商品
            if j < w[i]:               #如果第i件商品的重量大于当前背包容量，则当前的最有解即为不放i时情况。
                dp[i][j] = dp[i - 1][j];
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i]] + v[i]);
def findWhat(i,j): #最优解情况
    if i>=0:
        if dp[i][j] == dp[i-1][j]:
            item[i] = 0
            findWhat(i-1,j)
        elif j - w[i] >= 0 and  dp[i][j] == dp[i - 1][j - w[i]] + v[i]:
            item[i] = 1
            findWhat(i-1,j-w[i])
 
def print1():
    for i in range(5):
        res = []
        for j in range(9):
            res.append(dp[i][j])
        print(res)
    print(item)
findMax()
findWhat(4,8)
print1()
